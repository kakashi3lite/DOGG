name: Security & Quality Checks\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n  schedule:\n    # Run security scans daily at 2 AM UTC\n    - cron: '0 2 * * *'\n\njobs:\n  security-audit:\n    name: Security Audit\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '18'\n        cache: 'pnpm'\n        \n    - name: Install pnpm\n      uses: pnpm/action-setup@v2\n      with:\n        version: 8\n        \n    - name: Install dependencies\n      run: pnpm install --frozen-lockfile\n      \n    - name: Run npm audit\n      run: pnpm audit --audit-level moderate\n      continue-on-error: true\n      \n    - name: Run Snyk security scan\n      uses: snyk/actions/node@master\n      env:\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      with:\n        args: --severity-threshold=medium\n      continue-on-error: true\n        \n    - name: Run ESLint security rules\n      run: pnpm lint\n      \n  static-analysis:\n    name: Static Analysis (SAST)\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Run CodeQL Analysis\n      uses: github/codeql-action/init@v2\n      with:\n        languages: javascript,typescript\n        \n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n      \n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n      \n    - name: Run Semgrep SAST\n      uses: returntocorp/semgrep-action@v1\n      with:\n        config: >-\n          p/security-audit\n          p/secrets\n          p/owasp-top-ten\n          p/typescript\n      env:\n        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}\n        \n  dependency-check:\n    name: Dependency Vulnerability Check\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '18'\n        cache: 'pnpm'\n        \n    - name: Install pnpm\n      uses: pnpm/action-setup@v2\n      with:\n        version: 8\n        \n    - name: Install dependencies\n      run: pnpm install --frozen-lockfile\n      \n    - name: Run OSV-Scanner\n      uses: google/osv-scanner-action@v1\n      with:\n        scan-args: |-\n          -r\n          --format=json\n          --output=osv-results.json\n          ./\n      continue-on-error: true\n      \n    - name: Upload OSV results\n      uses: actions/upload-artifact@v3\n      if: always()\n      with:\n        name: osv-results\n        path: osv-results.json\n        \n  test-suite:\n    name: Security Test Suite\n    runs-on: ubuntu-latest\n    \n    services:\n      mongodb:\n        image: mongo:7\n        options: >-\n          --health-cmd \"mongosh --eval 'db.runCommand(\\\"ping\\\")'\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 27017:27017\n          \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '18'\n        cache: 'pnpm'\n        \n    - name: Install pnpm\n      uses: pnpm/action-setup@v2\n      with:\n        version: 8\n        \n    - name: Install dependencies\n      run: pnpm install --frozen-lockfile\n      \n    - name: Run unit tests\n      run: pnpm test\n      env:\n        JWT_SECRET: test-secret-key-for-testing-only\n        MONGODB_URI: mongodb://localhost:27017/dogg-test\n        \n    - name: Run security tests\n      run: pnpm --filter api test src/__tests__/security.test.ts\n      env:\n        JWT_SECRET: test-secret-key-for-testing-only\n        MONGODB_URI: mongodb://localhost:27017/dogg-test\n        \n    - name: Run red team tests\n      run: pnpm --filter api test src/__tests__/redteam.test.ts\n      env:\n        JWT_SECRET: test-secret-key-for-testing-only\n        MONGODB_URI: mongodb://localhost:27017/dogg-test\n        \n    - name: Generate test coverage\n      run: pnpm test:coverage\n      env:\n        JWT_SECRET: test-secret-key-for-testing-only\n        MONGODB_URI: mongodb://localhost:27017/dogg-test\n        \n    - name: Upload coverage reports\n      uses: codecov/codecov-action@v3\n      with:\n        files: ./apps/api/coverage/lcov.info\n        flags: api\n        name: dogg-api-coverage\n        \n  docker-security:\n    name: Docker Security Scan\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Build Docker image\n      run: |\n        cd apps/api\n        docker build -t dogg-api:latest .\n        \n    - name: Run Trivy vulnerability scanner\n      uses: aquasecurity/trivy-action@master\n      with:\n        image-ref: 'dogg-api:latest'\n        format: 'sarif'\n        output: 'trivy-results.sarif'\n        \n    - name: Upload Trivy scan results\n      uses: github/codeql-action/upload-sarif@v2\n      if: always()\n      with:\n        sarif_file: 'trivy-results.sarif'\n        \n  secrets-scan:\n    name: Secrets Detection\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      with:\n        fetch-depth: 0  # Full history for secret scanning\n        \n    - name: Run TruffleHog OSS\n      uses: trufflesecurity/trufflehog@main\n      with:\n        path: ./\n        base: main\n        head: HEAD\n        extra_args: --debug --only-verified\n        \n    - name: Run GitLeaks\n      uses: gitleaks/gitleaks-action@v2\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        \n  security-headers:\n    name: Security Headers Check\n    runs-on: ubuntu-latest\n    if: github.event_name == 'pull_request'\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '18'\n        cache: 'pnpm'\n        \n    - name: Install pnpm\n      uses: pnpm/action-setup@v2\n      with:\n        version: 8\n        \n    - name: Install dependencies\n      run: pnpm install --frozen-lockfile\n      \n    - name: Start API server\n      run: |\n        cd apps/api\n        pnpm build\n        pnpm start &\n        sleep 10\n      env:\n        JWT_SECRET: test-secret-key\n        MONGODB_URI: mongodb://localhost:27017/dogg-test\n        PORT: 3001\n        \n    - name: Test security headers\n      run: |\n        # Test security headers are present\n        curl -I http://localhost:3001/health | grep -i \"x-content-type-options: nosniff\" || exit 1\n        curl -I http://localhost:3001/health | grep -i \"x-frame-options: deny\" || exit 1\n        curl -I http://localhost:3001/health | grep -i \"content-security-policy\" || exit 1\n        curl -I http://localhost:3001/health | grep -i \"strict-transport-security\" || exit 1\n        echo \"✅ All security headers are present\"\n        \n  license-check:\n    name: License Compliance\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '18'\n        cache: 'pnpm'\n        \n    - name: Install pnpm\n      uses: pnpm/action-setup@v2\n      with:\n        version: 8\n        \n    - name: Install dependencies\n      run: pnpm install --frozen-lockfile\n      \n    - name: Check licenses\n      run: |\n        npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' --excludePrivatePackages\n        \n  security-report:\n    name: Generate Security Report\n    needs: [security-audit, static-analysis, dependency-check, test-suite]\n    runs-on: ubuntu-latest\n    if: always()\n    \n    steps:\n    - name: Download all artifacts\n      uses: actions/download-artifact@v3\n      \n    - name: Generate security summary\n      run: |\n        echo \"# 🔒 DOGG Security Report\" >> security-report.md\n        echo \"\" >> security-report.md\n        echo \"**Generated:** $(date)\" >> security-report.md\n        echo \"**Commit:** ${{ github.sha }}\" >> security-report.md\n        echo \"\" >> security-report.md\n        echo \"## Security Checks Status\" >> security-report.md\n        echo \"\" >> security-report.md\n        echo \"- ✅ Dependency Audit: ${{ needs.security-audit.result }}\" >> security-report.md\n        echo \"- ✅ Static Analysis: ${{ needs.static-analysis.result }}\" >> security-report.md\n        echo \"- ✅ Vulnerability Scan: ${{ needs.dependency-check.result }}\" >> security-report.md\n        echo \"- ✅ Security Tests: ${{ needs.test-suite.result }}\" >> security-report.md\n        echo \"\" >> security-report.md\n        echo \"## Recommendations\" >> security-report.md\n        echo \"\" >> security-report.md\n        echo \"- 🔄 Review and update dependencies regularly\" >> security-report.md\n        echo \"- 🔍 Monitor security advisories\" >> security-report.md\n        echo \"- 🧪 Run security tests before deployment\" >> security-report.md\n        echo \"- 📊 Maintain test coverage above 80%\" >> security-report.md\n        \n    - name: Upload security report\n      uses: actions/upload-artifact@v3\n      with:\n        name: security-report\n        path: security-report.md