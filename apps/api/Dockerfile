# Multi-stage build for security and efficiency\nFROM node:18-alpine AS base\n\n# Install pnpm\nRUN npm install -g pnpm@8.12.0\n\n# Set working directory\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json pnpm-*.yaml ./\nCOPY apps/api/package*.json ./apps/api/\nCOPY packages/types/package*.json ./packages/types/\n\n# Install dependencies\nRUN pnpm install --frozen-lockfile --prod\n\n# Build stage\nFROM base AS builder\n\n# Install dev dependencies for building\nRUN pnpm install --frozen-lockfile\n\n# Copy source code\nCOPY . .\n\n# Build the application\nRUN pnpm --filter api build\n\n# Production stage\nFROM node:18-alpine AS production\n\n# Create non-root user for security\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S dogg -u 1001\n\n# Install dumb-init for proper signal handling\nRUN apk add --no-cache dumb-init\n\n# Set working directory\nWORKDIR /app\n\n# Copy built application and dependencies\nCOPY --from=builder --chown=dogg:nodejs /app/apps/api/dist ./dist\nCOPY --from=builder --chown=dogg:nodejs /app/node_modules ./node_modules\nCOPY --from=builder --chown=dogg:nodejs /app/apps/api/package.json ./package.json\n\n# Create logs directory\nRUN mkdir -p /app/logs && chown dogg:nodejs /app/logs\n\n# Security: Remove unnecessary packages and files\nRUN apk del apk-tools && \\\n    rm -rf /var/cache/apk/* && \\\n    rm -rf /tmp/* && \\\n    rm -rf /root/.npm\n\n# Set security-focused environment variables\nENV NODE_ENV=production\nENV NODE_OPTIONS=\"--max-old-space-size=512\"\nENV NPM_CONFIG_AUDIT_LEVEL=moderate\n\n# Use non-root user\nUSER dogg\n\n# Expose port\nEXPOSE 3001\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD node healthcheck.js\n\n# Add health check script\nCOPY --chown=dogg:nodejs <<EOF /app/healthcheck.js\nconst http = require('http');\nconst options = {\n  host: 'localhost',\n  port: 3001,\n  path: '/health',\n  timeout: 2000\n};\nconst request = http.request(options, (res) => {\n  console.log('Health check status:', res.statusCode);\n  process.exit(res.statusCode === 200 ? 0 : 1);\n});\nrequest.on('error', () => process.exit(1));\nrequest.end();\nEOF\n\n# Start the application with dumb-init\nENTRYPOINT [\"dumb-init\", \"--\"]\nCMD [\"node\", \"dist/index.js\"]\n\n# Security labels\nLABEL security.scan=\"enabled\" \\\n      security.policy=\"strict\" \\\n      maintainer=\"DOGG Security Team\" \\\n      version=\"1.0.0\"