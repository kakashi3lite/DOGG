import request from 'supertest';\nimport express from 'express';\nimport { UserModel } from '../models/user';\nimport authRouter from '../routes/auth';\nimport { connectDB } from '../db';\nimport { hashPassword } from '../middleware/security';\nimport jwt from 'jsonwebtoken';\n\n// Create test app\nconst app = express();\napp.use(express.json());\napp.use('/api/auth', authRouter);\n\ndescribe('Authentication Routes', () => {\n  beforeEach(async () => {\n    // Clear database before each test\n    await UserModel.deleteMany({});\n  });\n\n  describe('POST /api/auth/register', () => {\n    const validUserData = {\n      username: 'testuser123',\n      email: 'test@example.com',\n      password: 'SecurePass123!'\n    };\n\n    it('should register a new user successfully', async () => {\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(validUserData)\n        .expect(201);\n\n      expect(response.body).toHaveProperty('message', 'User registered successfully');\n      expect(response.body).toHaveProperty('token');\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user).toHaveProperty('username', validUserData.username);\n      expect(response.body.user).toHaveProperty('email', validUserData.email);\n      expect(response.body.user).not.toHaveProperty('password');\n\n      // Verify user was created in database\n      const user = await UserModel.findOne({ email: validUserData.email });\n      expect(user).toBeTruthy();\n      expect(user?.username).toBe(validUserData.username);\n    });\n\n    it('should reject registration with weak password', async () => {\n      const weakPasswordData = {\n        ...validUserData,\n        password: '123456' // Too weak\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(weakPasswordData)\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error', 'Validation failed');\n      expect(response.body.details).toContainEqual(\n        expect.objectContaining({\n          path: 'password'\n        })\n      );\n    });\n\n    it('should reject registration with invalid email', async () => {\n      const invalidEmailData = {\n        ...validUserData,\n        email: 'invalid-email'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(invalidEmailData)\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error', 'Validation failed');\n    });\n\n    it('should reject registration with duplicate username', async () => {\n      // Register first user\n      await request(app)\n        .post('/api/auth/register')\n        .send(validUserData);\n\n      // Try to register with same username\n      const duplicateData = {\n        ...validUserData,\n        email: 'different@example.com'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(duplicateData)\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error', 'Validation failed');\n    });\n\n    it('should reject registration with duplicate email', async () => {\n      // Register first user\n      await request(app)\n        .post('/api/auth/register')\n        .send(validUserData);\n\n      // Try to register with same email\n      const duplicateData = {\n        ...validUserData,\n        username: 'differentuser'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(duplicateData)\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error', 'Validation failed');\n    });\n\n    it('should reject registration with short username', async () => {\n      const shortUsernameData = {\n        ...validUserData,\n        username: 'ab' // Too short\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(shortUsernameData)\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error', 'Validation failed');\n    });\n  });\n\n  describe('POST /api/auth/login', () => {\n    const userData = {\n      username: 'testuser123',\n      email: 'test@example.com',\n      password: 'SecurePass123!'\n    };\n\n    beforeEach(async () => {\n      // Create a test user before each login test\n      const hashedPassword = await hashPassword(userData.password);\n      await UserModel.create({\n        username: userData.username,\n        email: userData.email,\n        password: hashedPassword\n      });\n    });\n\n    it('should login successfully with valid credentials', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: userData.email,\n          password: userData.password\n        })\n        .expect(200);\n\n      expect(response.body).toHaveProperty('message', 'Login successful');\n      expect(response.body).toHaveProperty('token');\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user).toHaveProperty('username', userData.username);\n      expect(response.body.user).not.toHaveProperty('password');\n\n      // Verify JWT token\n      const decoded = jwt.verify(response.body.token, process.env.JWT_SECRET!) as any;\n      expect(decoded).toHaveProperty('email', userData.email);\n    });\n\n    it('should reject login with invalid email', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'nonexistent@example.com',\n          password: userData.password\n        })\n        .expect(401);\n\n      expect(response.body).toHaveProperty('error', 'Invalid credentials');\n    });\n\n    it('should reject login with invalid password', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: userData.email,\n          password: 'wrongpassword'\n        })\n        .expect(401);\n\n      expect(response.body).toHaveProperty('error', 'Invalid credentials');\n    });\n\n    it('should reject login with malformed email', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'invalid-email',\n          password: userData.password\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error', 'Validation failed');\n    });\n\n    it('should reject login with missing password', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: userData.email\n        })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error', 'Validation failed');\n    });\n  });\n\n  describe('POST /api/auth/refresh', () => {\n    let validToken: string;\n    let userId: string;\n\n    beforeEach(async () => {\n      // Create user and generate token\n      const user = await UserModel.create({\n        username: 'testuser123',\n        email: 'test@example.com',\n        password: await hashPassword('SecurePass123!')\n      });\n      userId = user._id.toString();\n      \n      validToken = jwt.sign(\n        { id: userId, username: user.username, email: user.email },\n        process.env.JWT_SECRET!,\n        { expiresIn: '1h' }\n      );\n    });\n\n    it('should refresh token successfully with valid token', async () => {\n      const response = await request(app)\n        .post('/api/auth/refresh')\n        .set('Authorization', `Bearer ${validToken}`)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('message', 'Token refreshed successfully');\n      expect(response.body).toHaveProperty('token');\n      \n      // Verify new token is different but valid\n      expect(response.body.token).not.toBe(validToken);\n      const decoded = jwt.verify(response.body.token, process.env.JWT_SECRET!) as any;\n      expect(decoded.id).toBe(userId);\n    });\n\n    it('should reject refresh with invalid token', async () => {\n      const response = await request(app)\n        .post('/api/auth/refresh')\n        .set('Authorization', 'Bearer invalid-token')\n        .expect(403);\n\n      expect(response.body).toHaveProperty('error', 'Invalid or expired token');\n    });\n\n    it('should reject refresh without token', async () => {\n      const response = await request(app)\n        .post('/api/auth/refresh')\n        .expect(401);\n\n      expect(response.body).toHaveProperty('error', 'Access token required');\n    });\n\n    it('should reject refresh with expired token', async () => {\n      const expiredToken = jwt.sign(\n        { id: userId, username: 'testuser', email: 'test@example.com' },\n        process.env.JWT_SECRET!,\n        { expiresIn: '-1h' } // Expired\n      );\n\n      const response = await request(app)\n        .post('/api/auth/refresh')\n        .set('Authorization', `Bearer ${expiredToken}`)\n        .expect(403);\n\n      expect(response.body).toHaveProperty('error', 'Invalid or expired token');\n    });\n  });\n\n  describe('GET /api/auth/me', () => {\n    let validToken: string;\n    let user: any;\n\n    beforeEach(async () => {\n      // Create user and generate token\n      user = await UserModel.create({\n        username: 'testuser123',\n        email: 'test@example.com',\n        password: await hashPassword('SecurePass123!')\n      });\n      \n      validToken = jwt.sign(\n        { id: user._id, username: user.username, email: user.email },\n        process.env.JWT_SECRET!,\n        { expiresIn: '1h' }\n      );\n    });\n\n    it('should return user info with valid token', async () => {\n      const response = await request(app)\n        .get('/api/auth/me')\n        .set('Authorization', `Bearer ${validToken}`)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user).toHaveProperty('username', user.username);\n      expect(response.body.user).toHaveProperty('email', user.email);\n      expect(response.body.user).toHaveProperty('id', user._id.toString());\n      expect(response.body.user).not.toHaveProperty('password');\n    });\n\n    it('should reject request without token', async () => {\n      const response = await request(app)\n        .get('/api/auth/me')\n        .expect(401);\n\n      expect(response.body).toHaveProperty('error', 'Access token required');\n    });\n\n    it('should reject request with invalid token', async () => {\n      const response = await request(app)\n        .get('/api/auth/me')\n        .set('Authorization', 'Bearer invalid-token')\n        .expect(403);\n\n      expect(response.body).toHaveProperty('error', 'Invalid or expired token');\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    it('should apply rate limiting to auth endpoints', async () => {\n      const userData = {\n        username: 'testuser123',\n        email: 'test@example.com',\n        password: 'SecurePass123!'\n      };\n\n      // Make multiple requests quickly\n      const promises = Array(6).fill(null).map(() => \n        request(app)\n          .post('/api/auth/login')\n          .send(userData)\n      );\n\n      const responses = await Promise.all(promises);\n      \n      // Some requests should be rate limited (429)\n      const rateLimitedResponses = responses.filter(r => r.status === 429);\n      expect(rateLimitedResponses.length).toBeGreaterThan(0);\n    }, 10000);\n  });\n});